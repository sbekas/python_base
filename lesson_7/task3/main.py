# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, parts):
        self.parts = parts

    def __add__(self, other):
        sum = self.parts + other.parts
        return Cell(sum)

    def __sub__(self, other):
        diff = self.parts - other.parts
        if diff < 0:
            return 'Ошибка: первое меньше второго'
        else:
            return Cell(diff)

    def __mul__(self, other):
        mul = self.parts * other.parts
        return Cell(mul)

    def __truediv__(self, other):
        div = self.parts // other.parts
        return Cell(div)

    def make_order(self, count):
        s = ''
        for i in range(self.parts // count):
            s += '*' * count + '\n'
        s += '*' * (self.parts % count)
        return s

    def __str__(self):
        return f'{self.parts}'

cell = Cell(45)
cell_2 = Cell(15)

print(cell + cell_2)
print(cell - cell_2)
print(cell_2 - cell)
print(cell * cell_2)
print(cell / cell_2)

print(cell.make_order(9))
print(cell_2.make_order(9))

